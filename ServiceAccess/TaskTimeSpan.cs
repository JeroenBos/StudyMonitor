using JBSnorro;
using StudyMonitor.ServiceAccess.ServiceReference;
using System;
using System.ComponentModel;

namespace StudyMonitor.ServiceAccess
{
	/// <summary> Represents a time span associated to a task and handles updating the database. </summary>
	public class TaskTimeSpan : DefaultINotifyPropertyChanged
	{
		private readonly IStudyTasksService service;
		internal readonly TaskTimeSpanService timeSpanMessageObject;

		/// <summary> Gets or sets the start of this time span. Setting will update the database. </summary>
		public DateTime Start
		{
			get { return start; }
			set { base.Set(ref start, value); }
		}
		/// <summary> Gets or sets the end of this time span. Null indicates the time span contains the current moment. Setting will update the database. </summary>
		public DateTime? End
		{
			get { return end; }
			set { base.Set(ref end, value); }
		}
		/// <summary> Gets or sets the task this time span is associated to. Setting will update the database. </summary>
		public StudyTask Task
		{
			get { return task; }
			set
			{
				if (value == null) throw new ArgumentNullException();
				base.Set(ref task, value);
			}
		}

		private DateTime start;
		private DateTime? end;
		private StudyTask task;

		/// <summary> Creates a <see cref="TaskTimeSpan"/> from database. </summary>
		/// <param name="messageObject"> The autogenerated message object representing a time span in the database. </param>
		public TaskTimeSpan(IStudyTasksService service, TaskTimeSpanService messageObject, StudyTask task)
		{
			if (messageObject == null) throw new ArgumentNullException(nameof(messageObject));
			if (task == null) throw new ArgumentNullException(nameof(task));
			if (service == null) throw new ArgumentNullException(nameof(service));
			if (messageObject.Id == 0) throw new ArgumentException();

			this.service = service;
			this.timeSpanMessageObject = messageObject;
			this.Task = task;
			this.Start = messageObject.Start;
			this.End = messageObject.End;

			this.PropertyChanged += OnPropertyChanged;
		}
		/// <remarks> This ctor should not add this instance to the database because the <see cref="StudyTask.TimeSpans.CollectionChanged"/> is responsible for that. </remarks>
		public TaskTimeSpan(IStudyTasksService service, StudyTask task, DateTime start)
		{
			if (task == null) throw new ArgumentNullException(nameof(task));
			if (service == null) throw new ArgumentNullException(nameof(service));

			this.service = service;
			this.timeSpanMessageObject = new TaskTimeSpanService() { Start = start, TaskId = task.Id };
			this.Task = task;
			this.Start = start;

			this.PropertyChanged += OnPropertyChanged;
		}

		private void OnPropertyChanged(object sender, PropertyChangedEventArgs e)
		{
			Contract.Assert(this.timeSpanMessageObject.Id != 0, "Id must have been set in initialization when adding this to time span collection");
			switch (e.PropertyName)
			{
				case nameof(Start):
					timeSpanMessageObject.Start = this.Start;
					break;
				case nameof(End):
					Contract.Assert(this.End != null || this.Task.HasAtMostOneOpenTimeSpan());
					timeSpanMessageObject.End = this.End;
					break;
				case nameof(Task):
					timeSpanMessageObject.TaskId = this.Task.MessageObject.Id;
					break;
			}
			service.Update(timeSpanMessageObject);
		}
	}
}
